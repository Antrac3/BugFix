import { supabase } from "@/lib/supabase";

export const testSupabaseConnection = async () => {
  console.log("üß™ === SUPABASE CONNECTION TEST ===");

  // Test 1: Configuration
  const url = import.meta.env.VITE_SUPABASE_URL;
  const key = import.meta.env.VITE_SUPABASE_ANON_KEY;

  console.log("1Ô∏è‚É£ Configuration check:");
  console.log("   URL configured:", !!url);
  console.log("   Key configured:", !!key);
  console.log(
    "   URL format:",
    url?.includes("supabase.co") ? "‚úÖ Valid" : "‚ùå Invalid",
  );

  if (!url || !key) {
    console.error("‚ùå Supabase not configured properly");
    return false;
  }

  // Test 2: Basic HTTP connectivity
  console.log("2Ô∏èÔøΩÔøΩÔøΩ HTTP connectivity test:");
  try {
    const response = await fetch(`${url}/rest/v1/`, {
      method: "HEAD",
      headers: {
        apikey: key,
      },
    });
    console.log("   HTTP Status:", response.status);
    console.log("   HTTP OK:", response.ok ? "‚úÖ" : "‚ùå");

    if (!response.ok) {
      console.error("‚ùå HTTP connectivity failed");
      return false;
    }
  } catch (httpError) {
    console.error("‚ùå HTTP request failed:", httpError);
    return false;
  }

  // Test 3: Supabase client authentication
  console.log("3Ô∏è‚É£ Auth client test:");
  try {
    const { data, error } = await supabase.auth.getUser();
    console.log("   Auth response data:", !!data);
    console.log(
      "   Auth error:",
      error ? "‚ùå " + error.message : "‚úÖ No error",
    );
    console.log("   User authenticated:", data?.user ? "‚úÖ Yes" : "‚ö†Ô∏è No");
  } catch (authError) {
    console.error("‚ùå Auth client failed:", authError);
    return false;
  }

  // Test 4: Simple table query (profiles should exist)
  console.log("4Ô∏è‚É£ Database query test:");
  try {
    const { data, error } = await supabase
      .from("profiles")
      .select("count", { count: "exact", head: true });

    console.log("   Query data:", data);
    console.log(
      "   Query error:",
      error ? "‚ùå " + JSON.stringify(error) : "‚úÖ No error",
    );

    if (error) {
      console.error("‚ùå Database query failed");
      return false;
    }
  } catch (queryError) {
    console.error("‚ùå Database query exception:", queryError);
    return false;
  }

  // Test 5: Campaigns table specific test
  console.log("5Ô∏è‚É£ Campaigns table test:");
  try {
    const { data, error } = await supabase
      .from("campaigns")
      .select("count", { count: "exact", head: true });

    console.log("   Campaigns query data:", data);
    console.log(
      "   Campaigns query error:",
      error ? "‚ùå " + JSON.stringify(error) : "‚úÖ No error",
    );

    if (error) {
      if (error.code === "42P01") {
        console.warn(
          "‚ö†Ô∏è Campaigns table does not exist - need to run SQL script",
        );
      } else {
        console.error("‚ùå Unexpected campaigns table error");
      }
    } else {
      console.log("‚úÖ Campaigns table exists and accessible");
    }
  } catch (campaignsError) {
    console.error("‚ùå Campaigns query exception:", campaignsError);
  }

  console.log("üß™ === END SUPABASE TEST ===");
  return true;
};
